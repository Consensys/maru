plugins {
  id 'maru.kotlin-application-conventions'
}

dependencies {
  implementation(project(":consensus"))
  implementation(project(":core"))
  implementation(project(":executionlayer"))

  implementation "tech.pegasys.teku.internal:executionclient"
  implementation("tech.pegasys.teku.internal:time") {
    because "required by executionclient ^"
  }
  implementation("tech.pegasys.teku.internal:ethereum-events") {
    because "required by executionclient ^"
  }

  implementation("org.hyperledger.besu.internal:core")

  implementation "info.picocli:picocli"
  implementation "com.sksamuel.hoplite:hoplite-toml"
  implementation "com.sksamuel.hoplite:hoplite-json"
  implementation "com.sksamuel.hoplite:hoplite-core"

  implementation "io.libp2p:jvm-libp2p"
  implementation "tech.pegasys.teku.internal:p2p"

  testImplementation "org.hyperledger.besu.internal:dsl"
  testImplementation "org.hyperledger.besu.internal:api"
  testImplementation("org.hyperledger.besu.internal:algorithms")
  testImplementation(group: 'org.hyperledger.besu.internal', name: 'core', classifier: 'test-support')

  testImplementation("org.hyperledger.besu.internal:merge")
}

Directory besuDistLocation = layout.buildDirectory.dir("dist/build/install").get()
Directory besuZipLocation = layout.buildDirectory.dir("tmp/besu").get()
File besuZipFile = besuZipLocation.file("besu.zip").asFile
String besuVersion = "25.1.0"
String besuArtifactId = "besu-$besuVersion"

tasks.register('downloadBesu', Task) {
  onlyIf { !besuZipFile.exists() }  // Basically manual cache management
  outputs.file(besuZipFile)
  doFirst {
    URI.create("https://github.com/hyperledger/besu/releases/download/$besuVersion/${besuArtifactId}.zip").toURL()
      .withInputStream { i ->
        project.logger.lifecycle('Downloading Besu jar...')
        besuZipFile.withOutputStream {
          it << i
        }
      }
  }
}

tasks.register('unzipBesu', Copy) {
  inputs.files(besuZipFile)
  Directory output = besuDistLocation
  outputs.dirs(output)
  def zipFile = besuZipFile

  from zipTree(zipFile)
  into output
  filesMatching("**/$besuArtifactId/**/*") {
    it.path = it.path.replace("$besuArtifactId/", "besu/")
  }
  doLast {
    besuDistLocation.file(besuArtifactId).asFile.deleteDir()
  }

  dependsOn "downloadBesu"
}

test {
  systemProperty("user.dir", besuDistLocation.asFile.toString())
  dependsOn "unzipBesu"
}
