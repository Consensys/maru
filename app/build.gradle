plugins {
  id 'maru.kotlin-application-conventions'
}

dependencies {
  implementation(project(":config"))
  implementation(project(":consensus"))
  implementation(project(":core"))
  implementation(project(":executionlayer"))
  implementation(project(":p2p"))
  implementation(project(":storage"))
  implementation(project(":crypto"))
  implementation(project(":serialization"))
  api(project(":linea-finalization-provider")) {
    exclude group: "build.linea", module: "besu-libs"
  }
  implementation("build.linea.internal:web3j-extensions") {
    exclude group: "build.linea", module: "besu-libs"
  }
  implementation(project(":jvm-libs:extensions"))
  implementation(project(":jvm-libs:mappers"))

  implementation "build.linea.internal:futures"

  implementation "info.picocli:picocli"
  implementation "com.sksamuel.hoplite:hoplite-core"
  implementation "io.vertx:vertx-micrometer-metrics"

  implementation("org.hyperledger.besu.internal:metrics-core")
  implementation("org.hyperledger.besu.internal:algorithms")
  implementation("tech.pegasys.teku.internal:p2p")
  implementation("io.libp2p:jvm-libp2p")

  testImplementation(project(":jvm-libs:test-utils"))
  testImplementation(testFixtures(project(":core")))
  testImplementation(testFixtures(project(":config")))
  testImplementation(project(":crypto"))
  testImplementation "org.hyperledger.besu.internal:api"
  testImplementation(group: 'org.hyperledger.besu.internal', name: 'core', classifier: 'test-support')
  testImplementation("org.hyperledger.besu.internal:p2p")
  testImplementation("org.hyperledger.besu.internal:qbft-core")
  testImplementation("org.hyperledger.besu:besu-datatypes")

  testImplementation("org.hyperledger.besu.internal:merge")
  testImplementation("org.hyperledger.besu.internal:plugins-rocksdb")
  testImplementation "org.jetbrains.kotlin:kotlin-test:2.1.0"
}

// Besu and Teku have similar versioning and some modules are also named the same. This creates conflicts when
// dependencies are collected
tasks.named("distTar").configure {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named("distZip").configure {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

application {
  mainClass = 'maru.app.CliEntrypoint'
}

jar {
  archiveBaseName = 'maru'
  manifest {
    attributes(
      'Class-Path': project.configurations.runtimeClasspath
      .collect {
        it.getName()
      }
      .findAll {
        it.endsWith('jar')
      }
      .join(' '),
      'Main-Class': 'maru.app.CliEntrypoint',
      'Multi-Release': 'true'
      )
  }
}

test {
  // To make room for Besu threads
  systemProperties["junit.jupiter.execution.parallel.config.dynamic.factor"] = 0.7
}
