import net.ltgt.gradle.errorprone.CheckSeverity
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  alias(libs.plugins.errorprone)
  alias(libs.plugins.spotless)
  alias(libs.plugins.spring.dependency.management)
  id "jacoco"
  id 'maru.kotlin-common-minimal-conventions'
}

subprojects.each {

  if (!it.project.plugins.hasPlugin("org.jetbrains.kotlin.jvm")) {
    it.project.apply plugin: libs.plugins.errorprone.get().getPluginId()

    it.project.dependencies {
      errorprone 'com.google.errorprone:error_prone_core'
    }
  }
}

allprojects {
  apply plugin: libs.plugins.spring.dependency.management.get().getPluginId()
  apply from: "${rootDir}/gradle/versions.gradle"
  apply plugin: 'java-library'

  apply plugin: libs.plugins.spotless.get().getPluginId()

  spotless {
    kotlin {
      // by default the target is every '.kt' and '.kts` file in the java sourcesets
      ktlint()
        .setEditorConfigPath("$rootDir/.editorconfig")
      licenseHeaderFile("${rootDir}/gradle/spotless/java-kotlin.license").onlyIfContentMatches("^(?!/\\*\\r?\\n \\*." +
        "*ConsenSys AG\\.)")
    }
    java {
      // This path needs to be relative to each project
      target 'src/**/*.java'
      removeUnusedImports()
      googleJavaFormat()
      importOrder 'build.linea', 'java', ''
      trimTrailingWhitespace()
      endWithNewline()
      // apply appropriate license header files.
      licenseHeaderFile("${rootDir}/gradle/spotless/java-kotlin.license").onlyIfContentMatches("^(?!/\\*\\r?\\n \\*." +
        "*ConsenSys AG\\.)")
    }
    // spotless check applied to build.gradle (groovy) files
    groovyGradle {
      target '*.gradle'
      greclipse('4.26').configFile(rootProject.file('gradle/spotless/greclipse.properties'))
      endWithNewline()
    }
  }

  tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
      '-Xlint:unchecked',
      '-Xlint:cast',
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      '-Werror',
    ]

    options.errorprone {
      excludedPaths = '.*/generated/*.*'
      disableWarningsInGeneratedCode = true
      // Our equals need to be symmetric, this checker doesn't respect that.
      check('EqualsGetClass', CheckSeverity.OFF)
      // We like to use futures with no return values.
      check('FutureReturnValueIgnored', CheckSeverity.OFF)
      // We use the JSR-305 annotations instead of the Google annotations.
      check('ImmutableEnumChecker', CheckSeverity.OFF)
      // This is a style check instead of an error-prone pattern.
      check('UnnecessaryParentheses', CheckSeverity.OFF)

      // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
      if (JavaVersion.current() == JavaVersion.VERSION_12) {
        check('Finally', CheckSeverity.OFF)
      }
      // This check is broken after Java 12.  See https://github.com/google/error-prone/issues/1352
      if (JavaVersion.current() > JavaVersion.VERSION_12) {
        check('TypeParameterUnusedInFormals', CheckSeverity.OFF)
      }

      check('FieldCanBeFinal', CheckSeverity.WARN)
      check('InsecureCryptoUsage', CheckSeverity.WARN)
      check('WildcardImport', CheckSeverity.WARN)
    }

    options.encoding = 'UTF-8'
  }

  // IntelliJ workaround to allow repeated debugging of unchanged code
  tasks.withType(JavaExec) {
    if (it.name.contains(".")) {
      outputs.upToDateWhen { false }
    }
  }

  test {
    jvmArgs += [
      '-Xmx4g',
      '-XX:-UseGCOverheadLimit',
      // Mockito and jackson-databind do some strange reflection during tests.
      // This suppresses an illegal access warning.
      '--add-opens',
      'java.base/java.util=ALL-UNNAMED',
      '--add-opens',
      'java.base/java.util.concurrent=ALL-UNNAMED',
      '--add-opens',
      'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
      // errorprone tests need access to the javac compiler
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
      '--add-exports',
      'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
    Set toImport = [
      'test.ethereum.include',
      'test.ethereum.state.eip',
      'root.log.level',
      'evm.log.level',
      'acctests.keepLogsOfPassingTests'
    ]
    for (String name : toImport) {
      if (System.getProperty(name) != null) {
        systemProperty name, System.getProperty(name)
      }
    }
    useJUnitPlatform {}
    testLogging {
      exceptionFormat TestExceptionFormat.FULL
      events 'passed', 'skipped', 'failed'
      showStandardStreams = true
    }
  }

  tasks.withType(Test).configureEach {
    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
    systemProperties["junit.jupiter.execution.parallel.mode.classes.default"] = "concurrent"
    // To make room for Besu threads
    systemProperties["junit.jupiter.execution.parallel.config.dynamic.factor"] = 0.66
  }
}

subprojects {
  apply plugin: "jacoco"

  if (file('src/integration-test').directory) {
    sourceSets {
      integrationTest {
        java {
          compileClasspath += main.output
          runtimeClasspath += main.output
          srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
      }
    }

    //    if (file('src/test-support').directory) {
    //      dependencies { integrationTestImplementation sourceSets.testSupport.output }
    //    }

    task integrationTest(type: Test, dependsOn: ["compileTestJava"]) {
      group = "verification"
      description = "Runs the Besu integration tests"

      jvmArgs = [
        '--add-opens',
        'java.base/java.util=ALL-UNNAMED',
        '--add-opens',
        'java.base/java.util.concurrent=ALL-UNNAMED'
      ]
      testClassesDirs = sourceSets.integrationTest.output.classesDirs
      classpath = sourceSets.integrationTest.runtimeClasspath
      outputs.upToDateWhen { false }
      useJUnitPlatform {}
    }
  }

  tasks.withType(Test) {
    // If GRADLE_MAX_TEST_FORKS is not set, use half the available processors
    maxParallelForks = (System.getenv('GRADLE_MAX_TEST_FORKS') ?: (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)).toInteger()
  }

  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }

  configurations {
    testSupportImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom implementation
    testSupportArtifacts
  }

  // making sure assemble task invokes integration test compile
  afterEvaluate { subproject ->
    project.tasks.jacocoTestReport {
      if (project.tasks.findByName('acceptanceTest')) {
        executionData(tasks.named("acceptanceTest").get())
        sourceSets(sourceSets["acceptanceTest"])
      }
    }

    if (subproject.tasks.findByName('compileIntegrationTestJava')) {
      subproject.tasks.assemble.dependsOn compileIntegrationTestJava
    }
  }
}

task jacocoAggregatedReport(type: JacocoReport) {
  group = "verification"

  additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from files(subprojects.sourceSets.main.output)

  executionData.from fileTree(dir: '.', includes: ['**/jacoco/*.exec'])
  reports {
    xml.required = true
    html.destination file("build/reports/jacocoHtml")
  }
}

apply plugin: 'application'

run {
  // TODO: Fill
}
