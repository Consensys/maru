import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id 'maru.kotlin-library-conventions'
}

dependencies {
  implementation project(":app")
  implementation project(":consensus")
  implementation project(":config")

  implementation "tech.pegasys.teku.internal:executionclient"
  implementation "tech.pegasys.teku.internal:time"
  implementation "tech.pegasys.teku.internal:bytes"
  implementation "tech.pegasys.teku.internal:ethereum-events"
  implementation "tech.pegasys.teku.internal:spec"
  implementation "tech.pegasys.teku.internal:unsigned"

  implementation "org.hyperledger.besu.internal:rlp"
  implementation "org.hyperledger.besu.internal:core"
  implementation "org.hyperledger.besu:besu-datatypes"
  implementation "org.hyperledger.besu:plugin-api"
  implementation "org.hyperledger.besu.internal:algorithms"

  implementation ("org.web3j:core")

  implementation "com.sksamuel.hoplite:hoplite-toml"
  implementation "com.sksamuel.hoplite:hoplite-json"
  implementation "com.sksamuel.hoplite:hoplite-core"

  implementation('com.palantir.docker.compose:docker-compose-rule-junit4')
  implementation('com.palantir.docker.compose:docker-compose-junit-jupiter')
  implementation "org.hyperledger.besu.internal:dsl"
}

sourceSets {
  acceptanceTest {
    kotlin {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
    compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.main.output + sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  }
}

tasks.register('acceptanceTest', Test) { test ->
  description = "Runs acceptance tests."
  group = "verification"
  useJUnitPlatform()
  outputs.upToDateWhen { false }

  classpath = sourceSets.acceptanceTest.runtimeClasspath
  testClassesDirs = sourceSets.acceptanceTest.output.classesDirs

  testLogging {
    events TestLogEvent.FAILED,
      TestLogEvent.SKIPPED,
      TestLogEvent.STANDARD_ERROR,
      TestLogEvent.STARTED,
      TestLogEvent.PASSED
    exceptionFormat TestExceptionFormat.FULL
    showCauses true
    showExceptions true
    showStackTraces true
    // set showStandardStreams if you need to see test logs
    showStandardStreams true
  }
}
